//
//  QuestionsViewController.swift
//  FaceAnswer
//
//  Created by Berkay Unal on 25.01.2024.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class QuestionsViewController: HeadGesture {

  // MARK: - Public properties -

  @IBOutlet weak var scoreLabel: UILabel!
  @IBOutlet weak var timerLabel: UILabel!
  @IBOutlet weak var questionLabel: UILabel!

  weak var countdownTimer: Timer?
  var presenter: QuestionsPresenterInterface!
  var remainingTime = 10
  var selectedCategory: Dictionary<String, Bool>?
  var keysArray: [String] = []
  var valuesArray: [Bool] = []
  var currentIndex = 0
  var score: Int64 = 0

  //   MARK: - Lifecycle -

  override func viewDidLoad() {
    super.viewDidLoad()
    scoreLabel.text = "Score: \(score)"
    timerLabel.text = "TIME STARTS NOW!"
    getUserData()
    keysArray = Array(selectedCategory!.keys)
    valuesArray = Array(selectedCategory!.values)
    updateQuestion()
    setupCamera()
    startTimer()
  }

  override func startTimer() {

    countdownTimer = Timer.scheduledTimer(timeInterval: 1,
                                          target: self,
                                          selector: #selector(updateTimerUI),
                                          userInfo: nil,
                                          repeats: true)
  }


  override func stopTimer() {
    countdownTimer?.invalidate()
    countdownTimer = nil
    DispatchQueue.main.async {
      self.timerLabel.text = ""
      self.questionLabel.text = ""
    }
  }

  func updateQuestion() {
    guard currentIndex < keysArray.count else {
      presenter.setSelectedUserScore(score)
      //      presenter.updateAllScores(score)
      countdownTimer?.invalidate()
      captureSession.removeOutput(videoOutput)
      presenter.navigateToResults()
      return
    }
    let currentKey = keysArray[currentIndex]
    questionLabel.text = "\(currentKey)"
    currentIndex += 1
  }

  override func handleHeadMovement(answer: Bool) {
    if answer == self.valuesArray[self.currentIndex - 1] {
      DispatchQueue.main.async {
        self.captureSession.removeOutput(self.videoOutput)
        self.stopTimer()
        self.showAlert(message: "Your answer is Correct", title: "Great job!")
        self.score += 10
        self.scoreLabel.text = "Score: \(self.score)"
      }
    }  else {
      DispatchQueue.main.async {
        self.showAlert(message: "Your answer is Wrong", title: "Not this time!")
        self.stopTimer()
        self.captureSession.removeOutput(self.videoOutput)
      }
    }

  }

  @objc func updateTimerUI() {
    if remainingTime > 0 {
      remainingTime -= 1
      timerLabel.text = "\(remainingTime) seconds"
    } else {
      stopTimer()
      captureSession.removeOutput(videoOutput)
      showAlert(message: "Time is up.", title: "Sorry!")
    }
  }

  override func showAlert(message: String, title: String) {
    let alert = UIAlertController(title: title.uppercased(),
                                  message: message,
                                  preferredStyle: .alert)
    let action = UIAlertAction(title: "OK", style: .default) { [weak self] _ in
      //      if self!.currentIndex < (self?.keysArray.count)! {
      self?.restartTracking()
      self?.updateQuestion()
      self?.startTimer()
      self?.remainingTime = 10
      self?.timerLabel.text = "10 seconds"
      //      } else {
      //        self?.updateQuestion()
      //      }
    }
    alert.addAction(action)
    present(alert, animated: true, completion: nil)
  }

  //  deinit {
  //    countdownTimer?.invalidate()
  //    captureSession.removeOutput(self.videoOutput)
  //    print("This deinit got executed!")
  //  }
}

// MARK: - Extensions -

extension QuestionsViewController: QuestionsViewInterface {
  func getUserData() {
    self.selectedCategory = presenter.getSelectedUserData()
  }
}
