//
//  QuestionsViewController.swift
//  FaceAnswer
//
//  Created by Berkay Unal on 25.01.2024.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import AVFAudio

final class QuestionsViewController: HeadGesture {

  // MARK: - Public properties -

  @IBOutlet weak var bellImageView: UIImageView!
  @IBOutlet weak var scoreLabel: UILabel!
  @IBOutlet weak var timerLabel: UILabel!
  @IBOutlet weak var questionLabel: UILabel!

  weak var countdownTimer: Timer?
  var presenter: QuestionsPresenterInterface!
  private var remainingTime = 11
  private var selectedCategory: Dictionary<String, Bool>?
  private var keysArray: [String] = []
  private var valuesArray: [Bool] = []
  private var currentIndex = 0
  private var score: Int64 = 0
  private var audioPlayer: AVAudioPlayer?

  //   MARK: - Lifecycle & Functions -

  override func viewDidLoad() {
    super.viewDidLoad()
    timerLabel.text = "TIME STARTS NOW!"
    getUserData()
    keysArray = Array(selectedCategory!.keys)
    valuesArray = Array(selectedCategory!.values)
    updateQuestion()
    setupCamera()
    setupScoreLabel()
  }

  override func handleHeadMovement(answer: Bool) {
    if answer == self.valuesArray[self.currentIndex - 1] {
      DispatchQueue.main.sync {
        self.captureSession.removeOutput(self.videoOutput)
        self.playCorrectAnswerSound()
        self.score += 10
        self.scoreLabel.text = "Score: \(self.score)"
        self.resetUI()
        self.showAlert(message: "Your answer is Correct", title: "Great job!")
      }
    }  else {
      DispatchQueue.main.sync {
        self.captureSession.removeOutput(self.videoOutput)
        self.playWrongAnswerSound()
        self.resetUI()
        self.showAlert(message: "Your answer is Wrong", title: "Not this time!")
      }
    }
  }

  private func setupScoreLabel() {
    scoreLabel.text = "Score: 0"
    scoreLabel.backgroundColor = UIColor.systemMint
    scoreLabel.layer.cornerRadius = 20
    scoreLabel.clipsToBounds = true
    scoreLabel.textAlignment = .center
  }

  private func addTimerGif() {
    guard let gifURL = Bundle.main.url(forResource: "ringing_bell", withExtension: "gif") else {return}
    if let imageData = try? Data(contentsOf: gifURL) {
      let gifImage = UIImage.animatedImage(withAnimatedGIFData: imageData)
      bellImageView.image = gifImage
    }
  }

  private func resetUI() {
    countdownTimer?.invalidate()
    timerLabel.text = ""
    questionLabel.text = ""
    bellImageView.image = UIImage()
  }

  private func updateQuestion() {
    guard currentIndex < keysArray.count else {
      captureSession.removeOutput(videoOutput)
      presenter.setSelectedUserScore(score)
      presenter.navigateToResults()
      playResultsSound()
      return
    }
    countdownTimer = Timer.scheduledTimer(timeInterval: 1,
                                          target: self,
                                          selector: #selector(updateTimerUI),
                                          userInfo: nil,
                                          repeats: true)
    let currentKey = keysArray[currentIndex]
    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
      self.questionLabel.text = "\(currentKey)"
    }
    currentIndex += 1
  }

  @objc func updateTimerUI() {
    if remainingTime > 1 {
      remainingTime -= 1
      timerLabel.text = "\(remainingTime) seconds"
      addTimerGif()
    } else {
      resetUI()
      captureSession.removeOutput(videoOutput)
      showAlert(message: "The correct answer was \(valuesArray[currentIndex - 1]).", title: "Time is up!")
      playTimeIsUpSound()
    }
  }

  private func showAlert(message: String, title: String) {
    let alert = UIAlertController(title: title.uppercased(),
                                  message: message,
                                  preferredStyle: .alert)
    present(alert, animated: true, completion: nil)
    DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
      alert.dismiss(animated: true) {
        self?.remainingTime = 11
        self?.updateQuestion()
        self?.restartTracking()
      }
    }
  }

  // MARK: - Sounds' Functions -

  private func playCorrectAnswerSound() {
    guard let correctAnswerURL = Bundle.main.url(forResource: "correctanswer", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: correctAnswerURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }

  private func playWrongAnswerSound() {
    guard let wrongAnswerURL = Bundle.main.url(forResource: "wronganswer", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: wrongAnswerURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }

  private func playTimeIsUpSound() {
    guard let timeIsUpURL = Bundle.main.url(forResource: "timeisup", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: timeIsUpURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }

  private func playResultsSound() {
    guard let results = Bundle.main.url(forResource: "result", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: results)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }
}

// MARK: - Extensions -

extension QuestionsViewController: QuestionsViewInterface {
  func getUserData() {
    self.selectedCategory = presenter.getSelectedUserData()
  }
}


