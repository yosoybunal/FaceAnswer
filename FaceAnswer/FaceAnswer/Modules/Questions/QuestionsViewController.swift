//
//  QuestionsViewController.swift
//  FaceAnswer
//
//  Created by Berkay Unal on 25.01.2024.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import AVFAudio

final class QuestionsViewController: HeadGesture {

  // MARK: - Public properties -

  @IBOutlet weak var scoreLabel: UILabel!
  @IBOutlet weak var timerLabel: UILabel!
  @IBOutlet weak var questionLabel: UILabel!

  weak var countdownTimer: Timer?
  var presenter: QuestionsPresenterInterface!
  private var remainingTime = 10
  private var selectedCategory: Dictionary<String, Bool>?
  private var keysArray: [String] = []
  private var valuesArray: [Bool] = []
  private var currentIndex = 0
  private var score: Int64 = 0
  private var audioPlayer: AVAudioPlayer?

  //   MARK: - Lifecycle & Functions -

  override func viewDidLoad() {
    super.viewDidLoad()
    scoreLabel.text = "Score: 0"
    timerLabel.text = "TIME STARTS NOW!"
    getUserData()
    keysArray = Array(selectedCategory!.keys)
    valuesArray = Array(selectedCategory!.values)
    updateQuestion()
    setupCamera()
  }

  override func handleHeadMovement(answer: Bool) {
    if answer == self.valuesArray[self.currentIndex - 1] {
      DispatchQueue.main.async {
        self.captureSession.removeOutput(self.videoOutput)
        self.stopTimer()
        self.showAlert(message: "Your answer is Correct", title: "Great job!")
        self.score += 10
        self.scoreLabel.text = "Score: \(self.score)"
        self.playCorrectAnswerSound()
      }
    }  else {
      DispatchQueue.main.async {
        self.stopTimer()
        self.captureSession.removeOutput(self.videoOutput)
        self.showAlert(message: "Your answer is Wrong", title: "Not this time!")
        self.playWrongAnswerSound()
      }
    }
  }

  private func stopTimer() {
    countdownTimer?.invalidate()
    timerLabel.text = ""
    questionLabel.text = ""
  }

  private func updateQuestion() {
    guard currentIndex < keysArray.count else {
      captureSession.removeOutput(videoOutput)
      presenter.setSelectedUserScore(score)
      presenter.navigateToResults()
      return
    }
    countdownTimer = Timer.scheduledTimer(timeInterval: 1,
                                          target: self,
                                          selector: #selector(updateTimerUI),
                                          userInfo: nil,
                                          repeats: true)
    let currentKey = keysArray[currentIndex]
    questionLabel.text = "\(currentKey)"
    currentIndex += 1
  }

  @objc func updateTimerUI() {
    if remainingTime > 0 {
      remainingTime -= 1
      timerLabel.text = "\(remainingTime) seconds"
    } else {
      stopTimer()
      captureSession.removeOutput(videoOutput)
      showAlert(message: "The correct answer was \(valuesArray[currentIndex - 1]).", title: "Time is up!")
      playTimeIsUpSound()
    }
  }

  private func showAlert(message: String, title: String) {
    let alert = UIAlertController(title: title.uppercased(),
                                  message: message,
                                  preferredStyle: .alert)
    let action = UIAlertAction(title: "OK", style: .default) { [weak self] _ in
      self?.restartTracking()
      self?.updateQuestion()
      self?.remainingTime = 10
      self?.timerLabel.text = "10 seconds"
    }
    alert.addAction(action)
    present(alert, animated: true, completion: nil)
  }

  // MARK: - Sounds' Functions -

  private func playCorrectAnswerSound() {
    guard let correctAnswerURL = Bundle.main.url(forResource: "correctanswer", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: correctAnswerURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }

  private func playWrongAnswerSound() {
    guard let wrongAnswerURL = Bundle.main.url(forResource: "wronganswer", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: wrongAnswerURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }

  private func playTimeIsUpSound() {
    guard let timeIsUpURL = Bundle.main.url(forResource: "timeisup", withExtension: "mp3") else { return }
    do{
      audioPlayer = try AVAudioPlayer(contentsOf: timeIsUpURL)
      audioPlayer?.play()
    } catch {
      print("Error playing sound: \(error.localizedDescription)")
    }
  }
}

// MARK: - Extensions -

extension QuestionsViewController: QuestionsViewInterface {
  func getUserData() {
    self.selectedCategory = presenter.getSelectedUserData()
  }
}
